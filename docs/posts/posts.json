[
  {
    "path": "posts/2021-12-03-houston-blackout-analysis-2021/",
    "title": "Houston Blackout Analysis (2021)",
    "description": "This analysis will be based on remotely-sensed night lights data, acquired from the Visible Infrared Imaging Radiometer Suite (VIIRS) onboard the Suomi satellite.The task is to answer the questions: How many residential buildings were without power on 2021-02-16? Is there a socioeconomic metric that predicts being affected by the power outage?",
    "author": [
      {
        "name": "Cullen Molitor",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\nLoad libraries\r\n\r\n\r\nhide\r\n\r\nlibrary(sf)\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(stars)\r\nlibrary(rosm)\r\nlibrary(tmap)\r\n\r\n\r\n\r\nFunction to load the DNB dataset from VNP46A1 granules\r\n\r\n\r\nhide\r\n\r\nread_dnb <- function(file_name) {\r\n  # Reads the \"DNB_At_Sensor_Radiance_500m\" dataset from a VNP46A1 granule into a STARS object.\r\n  # Then read the sinolsoidal tile x/y positions and adjust the STARS dimensions (extent+delta)\r\n\r\n  # The name of the dataset holding the nightlight band in the granule\r\n  dataset_name <- \"//HDFEOS/GRIDS/VNP_Grid_DNB/Data_Fields/DNB_At_Sensor_Radiance_500m\"\r\n\r\n  # From the metadata, we pull out a string containing the horizontal and vertical tile index\r\n  h_string <- gdal_metadata(file_name)[199]\r\n  v_string <- gdal_metadata(file_name)[219]\r\n  \r\n  # We parse the h/v string to pull out the integer number of h and v\r\n  tile_h <- as.integer(str_split(h_string, \"=\", simplify = TRUE)[[2]])\r\n  tile_v <- as.integer(str_split(v_string, \"=\", simplify = TRUE)[[2]])\r\n\r\n  # From the h/v tile grid position, we get the offset and the extent\r\n  west <- (10 * tile_h) - 180\r\n  north <- 90 - (10 * tile_v)\r\n  east <- west + 10\r\n  south <- north - 10\r\n\r\n  # A tile is 10 degrees and has 2400x2400 grid cells\r\n  delta <- 10 / 2400\r\n\r\n  # Reading the dataset\r\n  dnb <- read_stars(file_name, sub = dataset_name)\r\n\r\n  # Setting the CRS and applying offsets and deltas\r\n  st_crs(dnb) <- st_crs(4326)\r\n  st_dimensions(dnb)$x$delta <- delta\r\n  st_dimensions(dnb)$x$offset <- west\r\n  st_dimensions(dnb)$y$delta <- -delta\r\n  st_dimensions(dnb)$y$offset <- north\r\n  \r\n  return(dnb)\r\n}\r\n\r\n\r\n\r\nRead in day night band (DNB) data\r\n\r\n\r\nhide\r\n\r\nFeb_07_v5 <- read_dnb(file_name = \"data/VNP46A1.A2021038.h08v05.001.2021039064328.h5\")\r\n\r\n\r\n//HDFEOS/GRIDS/VNP_Grid_DNB/Data_Fields/DNB_At_Sensor_Radiance_500m, \r\n\r\nhide\r\n\r\nFeb_07_v6 <- read_dnb(file_name = \"data/VNP46A1.A2021038.h08v06.001.2021039064329.h5\")\r\n\r\n\r\n//HDFEOS/GRIDS/VNP_Grid_DNB/Data_Fields/DNB_At_Sensor_Radiance_500m, \r\n\r\nhide\r\n\r\nFeb_16_v5 <- read_dnb(file_name = \"data/VNP46A1.A2021047.h08v05.001.2021048091106.h5\")\r\n\r\n\r\n//HDFEOS/GRIDS/VNP_Grid_DNB/Data_Fields/DNB_At_Sensor_Radiance_500m, \r\n\r\nhide\r\n\r\nFeb_16_v6 <- read_dnb(file_name = \"data/VNP46A1.A2021047.h08v06.001.2021048091105.h5\")\r\n\r\n\r\n//HDFEOS/GRIDS/VNP_Grid_DNB/Data_Fields/DNB_At_Sensor_Radiance_500m, \r\n\r\nCombine adjacent tiles for each date\r\n\r\n\r\nhide\r\n\r\nFeb_07_v5_v6 <- st_mosaic(Feb_07_v5, Feb_07_v6)\r\nFeb_16_v5_v6 <- st_mosaic(Feb_16_v5, Feb_16_v6)\r\n\r\n\r\n\r\nCreate blackout Mask\r\n\r\n\r\nhide\r\n\r\n## Take the difference of light data from before the storm and after the storm to make a mask of values with a difference greater than 200 nW cm-2 sr-1\r\ndiff <- (Feb_07_v5_v6 - Feb_16_v5_v6) > 200\r\n\r\n## Convert values with a difference of less than 200 to NA\r\ndiff[diff == F] <- NA\r\n\r\n\r\n\r\nVectorize blackout mask\r\n\r\n\r\nhide\r\n\r\nblackout_mask <- st_as_sf(diff)\r\n\r\n## Fix invalid geometries \r\nblackout_mask_fixed <- st_make_valid(blackout_mask)\r\n\r\nrm(diff, blackout_mask)\r\ngc()\r\n\r\n\r\n           used  (Mb) gc trigger   (Mb)  max used (Mb)\r\nNcells  3050150 162.9    4549190  243.0   4549190  243\r\nVcells 27487403 209.8  132459132 1010.6 156226150 1192\r\n\r\nCrop the vectorized blackout mask to the region of interest\r\n\r\n\r\nhide\r\n\r\n## Set region of interest\r\nhouston <- st_polygon(\r\n  list(\r\n    rbind(\r\n      c(-96.5, 29), \r\n      c(-96.5, 30.5), \r\n      c(-94.5, 30.5), \r\n      c(-94.5, 29), \r\n      c(-96.5, 29)\r\n    )\r\n  )\r\n) %>% \r\n  st_sfc(crs = 4326)\r\n\r\n## Crop night lights data\r\nintersects <- st_intersects(blackout_mask_fixed, houston, sparse = FALSE)\r\nblackout_cropped <- blackout_mask_fixed[intersects,]\r\n\r\n## Transform cropped blackout mask back to EPSG:3083 (NAD83 / Texas Centric Albers Equal Area)\r\nblackout_cropped_NAD83 <- st_transform(blackout_cropped, 3083)\r\n\r\nrm(blackout_cropped)\r\ngc()\r\n\r\n\r\n           used  (Mb) gc trigger  (Mb)  max used (Mb)\r\nNcells  3022909 161.5    4549190 243.0   4549190  243\r\nVcells 27559468 210.3  105967306 808.5 156226150 1192\r\n\r\nSanity check plot\r\n\r\n\r\nhide\r\n\r\nggplot() +\r\n  geom_sf(data = blackout_cropped_NAD83) +\r\n  theme_classic()\r\n\r\n\r\n\r\n\r\nRoads data\r\n\r\n\r\nhide\r\n\r\nquery <- \r\n  \"SELECT * \r\n   FROM gis_osm_roads_free_1 \r\n   WHERE fclass='motorway'\"\r\n\r\nhighways <- \r\n  st_read(\r\n    \"data/gis_osm_roads_free_1.gpkg\", \r\n    query = query) %>% \r\n  st_transform(crs = 3083) %>% \r\n  st_buffer(dist = 200) %>% \r\n  st_union()\r\n\r\n\r\nReading query `SELECT * \r\n   FROM gis_osm_roads_free_1 \r\n   WHERE fclass='motorway'' from data source `C:\\Users\\Cullen\\OneDrive\\Documents\\MEDS\\cullen-molitor.github.io\\_posts\\2021-12-03-houston-blackout-analysis-2021\\data\\gis_osm_roads_free_1.gpkg' \r\n  using driver `GPKG'\r\nSimple feature collection with 6085 features and 10 fields\r\nGeometry type: LINESTRING\r\nDimension:     XY\r\nBounding box:  xmin: -96.50429 ymin: 29.00174 xmax: -94.39619 ymax: 30.50886\r\nGeodetic CRS:  WGS 84\r\n\r\nhide\r\n\r\ncat(\"\\n\\n\\nAfter Transforming\\n\\n\")\r\n\r\n\r\n\r\n\r\n\r\nAfter Transforming\r\n\r\nhide\r\n\r\nhighways\r\n\r\n\r\nGeometry set for 1 feature \r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 1837420 ymin: 7218299 xmax: 2040621 ymax: 7387049\r\nProjected CRS: NAD83 / Texas Centric Albers Equal Area\r\n\r\nBasic highways plot\r\n\r\n\r\nhide\r\n\r\nggplot() +\r\n  geom_sf(data = highways) +\r\n  theme_classic()\r\n\r\n\r\n\r\n\r\nBuildings data\r\n\r\n\r\nhide\r\n\r\nquery <- \r\n  \"SELECT * \r\n   FROM gis_osm_buildings_a_free_1\r\n   WHERE (type IS NULL AND name IS NULL)\r\n   OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')\"\r\n\r\nbuildings <- \r\n  st_read(\r\n    \"data/gis_osm_buildings_a_free_1.gpkg\", \r\n    query = query) %>% \r\n  st_transform(crs = 3083) \r\n\r\n\r\nReading query `SELECT * \r\n   FROM gis_osm_buildings_a_free_1\r\n   WHERE (type IS NULL AND name IS NULL)\r\n   OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')' from data source `C:\\Users\\Cullen\\OneDrive\\Documents\\MEDS\\cullen-molitor.github.io\\_posts\\2021-12-03-houston-blackout-analysis-2021\\data\\gis_osm_buildings_a_free_1.gpkg' \r\n  using driver `GPKG'\r\nSimple feature collection with 475941 features and 5 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: -96.50055 ymin: 29.00344 xmax: -94.53285 ymax: 30.50393\r\nGeodetic CRS:  WGS 84\r\n\r\nhide\r\n\r\ncat(\"\\n\\n\\nAfter Transforming\\n\\n\")\r\n\r\n\r\n\r\n\r\n\r\nAfter Transforming\r\n\r\nhide\r\n\r\nbuildings\r\n\r\n\r\nSimple feature collection with 475941 features and 5 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: 1838180 ymin: 7216470 xmax: 2027040 ymax: 7386914\r\nProjected CRS: NAD83 / Texas Centric Albers Equal Area\r\nFirst 10 features:\r\n     osm_id code   fclass name       type\r\n1  15289727 1500 building <NA>       <NA>\r\n2  15289869 1500 building <NA>       <NA>\r\n3  15299261 1500 building <NA> apartments\r\n4  15331425 1500 building <NA>       <NA>\r\n5  15349970 1500 building <NA>       <NA>\r\n6  20868178 1500 building <NA>       <NA>\r\n7  20871848 1500 building <NA>       <NA>\r\n8  20871948 1500 building <NA>       <NA>\r\n9  20876080 1500 building <NA>       <NA>\r\n10 20877241 1500 building <NA>       <NA>\r\n                             geom\r\n1  MULTIPOLYGON (((1948074 728...\r\n2  MULTIPOLYGON (((1927251 732...\r\n3  MULTIPOLYGON (((1984491 730...\r\n4  MULTIPOLYGON (((1932443 731...\r\n5  MULTIPOLYGON (((1925238 732...\r\n6  MULTIPOLYGON (((1922763 727...\r\n7  MULTIPOLYGON (((1922899 727...\r\n8  MULTIPOLYGON (((1922788 727...\r\n9  MULTIPOLYGON (((1922699 727...\r\n10 MULTIPOLYGON (((1922807 727...\r\n\r\nCensus data\r\n\r\n\r\nhide\r\n\r\n# st_layers(\"ACS_2019_5YR_TRACT_48_TEXAS.gdb\"))\r\n\r\nacs_geoms <- \r\n  st_read(\r\n    \"data/ACS_2019_5YR_TRACT_48_TEXAS.gdb\",\r\n    layer = \"ACS_2019_5YR_TRACT_48_TEXAS\"\r\n  )\r\n\r\n\r\nReading layer `ACS_2019_5YR_TRACT_48_TEXAS' from data source \r\n  `C:\\Users\\Cullen\\OneDrive\\Documents\\MEDS\\cullen-molitor.github.io\\_posts\\2021-12-03-houston-blackout-analysis-2021\\data\\ACS_2019_5YR_TRACT_48_TEXAS.gdb' \r\n  using driver `OpenFileGDB'\r\nSimple feature collection with 5265 features and 15 fields\r\nGeometry type: MULTIPOLYGON\r\nDimension:     XY\r\nBounding box:  xmin: -106.6456 ymin: 25.83716 xmax: -93.50804 ymax: 36.5007\r\nGeodetic CRS:  NAD83\r\n\r\nhide\r\n\r\nacs_income <- \r\n  st_read(\r\n    \"data/ACS_2019_5YR_TRACT_48_TEXAS.gdb\",\r\n    layer = \"X19_INCOME\"\r\n  ) %>% \r\n  select(GEOID, B19013e1) %>% \r\n  rename(GEOID_Data = GEOID,\r\n         median_income = B19013e1)\r\n\r\n\r\nReading layer `X19_INCOME' from data source \r\n  `C:\\Users\\Cullen\\OneDrive\\Documents\\MEDS\\cullen-molitor.github.io\\_posts\\2021-12-03-houston-blackout-analysis-2021\\data\\ACS_2019_5YR_TRACT_48_TEXAS.gdb' \r\n  using driver `OpenFileGDB'\r\n\r\n\r\n\r\nhide\r\n\r\nacs_geoms_med <- left_join(acs_geoms, acs_income)  %>% \r\n  st_transform(crs = 3083) \r\n\r\n\r\n\r\nMerge datasets\r\n\r\n\r\nhide\r\n\r\nblackout_no_hwy <- st_difference(blackout_cropped_NAD83, highways)\r\nrm(highways)\r\ngc()\r\n\r\n\r\n           used  (Mb) gc trigger  (Mb)  max used   (Mb)\r\nNcells  7128106 380.7   15124634 807.8  15124634  807.8\r\nVcells 56419338 430.5  105967306 808.5 156226150 1192.0\r\n\r\n\r\n\r\nhide\r\n\r\nhouston_res_wo_power <- buildings[blackout_no_hwy, op = st_intersects]\r\nnumber_houses_wo_power <- length(houston_res_wo_power$osm_id)\r\n\r\n\r\n\r\nThe number of buildings that were left without power is 157411.\r\n\r\n\r\nhide\r\n\r\nacs_building <- st_join(houston_res_wo_power, acs_geoms_med, join = st_intersects)\r\n\r\n\r\n\r\n\r\n\r\nhide\r\n\r\nacs_polygon <- st_join(blackout_no_hwy, acs_geoms_med, join = st_intersects)\r\n\r\n\r\n\r\n\r\n\r\nhide\r\n\r\nhouston_bbox <- st_bbox(houston)\r\nhouston_map <- osm.raster(houston_bbox)\r\n\r\n\r\n\r\nArea and Median Incomes of Residences Affected by Houston Blackout in February, 2021\r\n\r\n\r\nhide\r\n\r\ntm_shape(houston_map) +\r\n  tm_rgb(alpha = .75) +\r\n  # tm_shape(acs_geoms_med,\r\n  #          border.alpha = 0) +\r\n  # tm_polygons(col = \"median_income\") +\r\n  tm_shape(blackout_no_hwy) +\r\n  tm_polygons(border.alpha = 1) +\r\n  tm_shape(acs_polygon) + \r\n  tm_fill(\"median_income\", \r\n          n = 5, \r\n          style = \"pretty\",\r\n          title = \"Median Income ($)\") +\r\n  tm_compass()+\r\n  tm_scale_bar()\r\n\r\n\r\n\r\n\r\nThis map was created by Amber McEldowney and Cullen Molitor 2021-10-24. Sources: Socioeconomic data: U.S. Census Bureau’s American Community Survey for Texas census tracts in 2019  Light data: NASA’s Level-1 and Atmosphere Archive & Distribution System Distributed Active Archive Center (LAADS DAAC)  Spatial & Buildings Data: OpenStreetMap\r\n\r\n\r\nhide\r\n\r\nrm(blackout_cropped_NAD83, acs_geoms, acs_income, buildings)\r\ngc()\r\n\r\n\r\n           used  (Mb) gc trigger   (Mb)  max used   (Mb)\r\nNcells  4931798 263.4   15124634  807.8  15124634  807.8\r\nVcells 46668815 356.1  154580253 1179.4 156226150 1192.0\r\n\r\nHistogram of Median Income for Houses Affected by Blackout\r\n\r\n\r\nhide\r\n\r\nMedian_Income <- acs_polygon$median_income\r\nhist(Median_Income,\r\nmain=\"Median Income in Regions Affected by Blackout\",\r\nxlab=\"Median Income ($)\",\r\nylab=\"Number of Households\",\r\ncol=\"grey\",\r\nfreq=FALSE\r\n)\r\n\r\n\r\n\r\n\r\nHistogram of Median Income in Houston\r\n\r\n\r\nhide\r\n\r\nhouston_nad <- houston %>%\r\n  st_as_sf() %>%\r\n  st_transform(houston, crs = 3083)\r\n\r\n# acs_geoms_med_bb <- st_join(acs_geoms_med, houston_nad, join = st_intersects)\r\n\r\nintersects <- st_intersects(acs_geoms_med, houston_nad, sparse = FALSE)\r\nacs_geoms_med_bb <- acs_geoms_med[intersects,]\r\n\r\nMedian_Income_Houston <- acs_geoms_med_bb$median_income\r\nhist(Median_Income_Houston,\r\nmain=\"Median Income in Houston\",\r\nxlab=\"Median Income ($)\",\r\nylab=\"Number of Households\",\r\ncol=\"grey\",\r\nfreq=FALSE\r\n)\r\n\r\n\r\n\r\n\r\nWe thought it would be interesting to compare the median incomes of households affected by the blackout, to median incomes in Houston in general, but because the blackouts seem to have occured in a more metropolitan area, it is likely the incomes are skewed higher for that area, and it does not give a clear indication of whether median income had an effect on whether or not a household experienced a blackout.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-03T10:56:48-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-03-iowas-wind-power-potential/",
    "title": "Iowa's Wind Power Potential",
    "description": "This analysis is used to determine locations in Iowa that would be suitible for wind turbine power plant installation as well as to calculate the hypothetical potential wind energy production capacity of these areas. This type of analysis can be used as a baseline in determining the maximum cost and benefits for potential renewable energy projects.",
    "author": [
      {
        "name": "Cullen Molitor",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\nHomework # 4\r\nWind Power Potential\r\nGroup # 2\r\nCullen Molitor\r\nAmber McEldowney\r\n# Setup ## Import Modules\r\nimport sqlalchemy as sa\r\nimport geopandas as gpd\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\nimport contextily as ctx\r\nimport math\r\n%matplotlib inline\r\nDatabase Connection\r\npg_uri_template = 'postgresql+psycopg2://{user}:{pwd}@{host}/{db_name}'\r\ndb_uri = pg_uri_template.format(\r\n    drivername='postgresql+psycopg2',\r\n    host = '{ip address}',\r\n    user = '{username}',\r\n    pwd = '{pwd}',\r\n    db_name = 'osmiowa'\r\n)\r\nengine = sa.create_engine(db_uri)\r\nData Details\r\nDatabase Name: - osmiowa\r\nDatabase Tables: - planet_osm_line - planet_osm_point - planet_osm_polygon - planet_osm_roads - spatial_ref_sys - wind - wind_cells\r\nGeometry: - Projected in EPSG:26975 - Geodetic CRS: NAD83 - Units: meters - Coordinate system: Cartesian 2D CS - Axes: easting, northing (X,Y) - Orientations: east, north\r\nQuery Database\r\nBuildings\r\nFrom planet_osm_polygon table ### Residential Scenario 1 (3H)\r\nsql_buildings_residential_1 = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 450) as way\r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    building IN ('yes', 'residential', 'apartments', 'house', 'static_caravan', 'detached')\r\nOR \r\n    landuse = 'residential'\r\nOR \r\n    place = 'town'\r\n\"\"\"\r\n# buildings_residential = gpd.read_postgis(sql_buildings_residential_1, con = engine, geom_col = 'way')\r\nResidential Scenario 2 (10H)\r\nsql_buildings_residential_2 = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 1500) as way \r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    building \r\nIN \r\n    ('yes', 'residential', 'apartments', 'house', 'static_caravan', 'detached')\r\nOR \r\n    landuse = 'residential'\r\nOR\r\n    place = 'town'\r\n\"\"\"\r\n# buildings_residential = gpd.read_postgis(sql_buildings_residential_2, con = engine, geom_col = 'way')\r\nNon-residential (3H)\r\nsql_buildings_nonresidential = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 450) as way\r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    building \r\nNOT IN \r\n    ('yes', 'residential', 'apartments', 'house', 'static_caravan', 'detached')\r\n\"\"\"\r\n# nonresidential_buffer = gpd.read_postgis(sql_buildings_nonresidential, con = engine, geom_col = 'way')\r\nAirports\r\nFrom planet_osm_polygon table\r\nCreate Airports (7500m) Buffer\r\nsql_airports = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 7500) as way\r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    aeroway IS NOT NULL\r\n\"\"\"\r\n# airports = gpd.read_postgis(sql_airports, con = engine, geom_col = 'way')\r\nMilitary Bases\r\nFrom planet_osm_polygon table\r\nsql_military = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 0) as way \r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    military IS NOT NULL\r\nOR \r\n    landuse = 'military'\r\n\"\"\"\r\n# military = gpd.read_postgis(sql_military, con = engine, geom_col = 'way')\r\nRailways and Roads\r\nFrom planet_osm_line table\r\nCreate Railways and Roads (2H) Buffer\r\nsql_railways_n_roads = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 300) as way\r\nFROM \r\n    planet_osm_line \r\nWHERE \r\n    (railway IS NOT NULL\r\n     AND railway \r\n     NOT IN ('abandoned', 'disused', 'razed', 'dismantled'))\r\nOR \r\n    (highway IS NOT NULL\r\nAND \r\n    highway \r\nIN \r\n    ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'road',\r\n    'primary', 'primary_link', 'secondary', 'secondary_link'))\r\n\"\"\"\r\n# railways_n_roads = gpd.read_postgis(sql_railways_n_roads, con = engine, geom_col = 'way')\r\nNature Reserves, Parks, and Wetlands\r\nFrom planet_osm_polygon table\r\nsql_nature = \\\r\n\"\"\"\r\nSELECT \r\n    way \r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    leisure \r\nIN \r\n    ('nature_reserve', 'park')\r\nOR\r\n    \"natural\" \r\nIN \r\n    ('wetland')\r\n\"\"\"\r\n# nature = gpd.read_postgis(sql_nature, con = engine, geom_col = 'way')\r\nRivers\r\nFrom planet_osm_line\r\nCreate Rivers (1H) Buffer\r\nsql_rivers = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 150) as way \r\nFROM \r\n    planet_osm_line \r\nWHERE \r\n    waterway \r\nIN \r\n    ('river')\r\n\"\"\"\r\n# rivers = gpd.read_postgis(sql_rivers, con = engine, geom_col = 'way')\r\nLakes\r\nFrom planet_osm_polygon\r\nsql_lakes = \\\r\n\"\"\"\r\nSELECT\r\n    way\r\nFROM \r\n    planet_osm_polygon\r\nWHERE \r\n    water \r\nIN \r\n    ('lake', 'reservoir', 'pond')\r\n\"\"\"\r\n# lakes = gpd.read_postgis(sql_lakes, con = engine, geom_col = 'way')\r\nPower Lines\r\nFrom planet_osm_line table\r\nCreate Powerlines (2H) Buffer\r\nsql_powerlines = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 300) as way\r\nFROM \r\n    planet_osm_line \r\nWHERE \r\n    power IS NOT NULL\r\n\"\"\"\r\n# powerlines = gpd.read_postgis(sql_powerlines, con = engine, geom_col = 'way')\r\nPower Plants\r\nFrom planet_osm_polygon table\r\nCreate Power Plants (1H) Buffer\r\nsql_powerplants = \\\r\n\"\"\"\r\nSELECT \r\n    ST_BUFFER(way, 150) as way\r\nFROM \r\n    planet_osm_polygon \r\nWHERE \r\n    power IS NOT NULL\r\n\"\"\"\r\n# powerplants = gpd.read_postgis(sql_powerplants, con = engine, geom_col = 'way')\r\nWind Turbines\r\nFrom planet_osm_point table\r\nsql_turbines = \\\r\n\"\"\"\r\nSELECT\r\n    ST_BUFFER(way, 680) as way\r\nFROM \r\n    planet_osm_point \r\nWHERE \r\n    \"generator:source\" IS NOT NULL\r\nAND \r\n    \"generator:source\" IN ('wind')\r\n\"\"\"\r\n# turbines_buffer = gpd.read_postgis(sql_turbines_buffer, con = engine, geom_col = 'way')\r\nMerge Subqueries\r\nScenario 1\r\nsql_siting_constraints = \\\r\nf\"\"\"\r\n{sql_buildings_residential_1} \r\nUNION\r\n{sql_buildings_nonresidential} \r\nUNION\r\n{sql_airports} \r\nUNION\r\n{sql_military} \r\nUNION\r\n{sql_railways_n_roads} \r\nUNION\r\n{sql_nature} \r\nUNION\r\n{sql_rivers} \r\nUNION\r\n{sql_lakes} \r\nUNION\r\n{sql_powerlines}\r\nUNION\r\n{sql_powerplants}\r\nUNION\r\n{sql_turbines}\r\n\"\"\"\r\nsiting_constraints = gpd.read_postgis(sql_siting_constraints, con = engine, geom_col = 'way')\r\nScenario 2\r\nsql_siting_constraints_2 = \\\r\nf\"\"\"\r\n{sql_buildings_residential_2} \r\nUNION\r\n{sql_buildings_nonresidential} \r\nUNION\r\n{sql_airports} \r\nUNION\r\n{sql_military} \r\nUNION\r\n{sql_railways_n_roads} \r\nUNION\r\n{sql_nature} \r\nUNION\r\n{sql_rivers} \r\nUNION\r\n{sql_lakes} \r\nUNION\r\n{sql_powerlines}\r\nUNION\r\n{sql_powerplants}\r\nUNION\r\n{sql_turbines}\r\n\"\"\"\r\nsiting_constraints_2 = gpd.read_postgis(sql_siting_constraints_2, con = engine, geom_col = 'way')\r\nExtra Credit\r\n# sql_siting_constraints = \\\r\n#     \"\"\"\r\n# SELECT \r\n#     ST_BUFFER(way, 450) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE building IN ('yes', 'residential', 'apartments', 'house', 'static_caravan', 'detached')\r\n#     OR landuse = 'residential'\r\n#     OR place = 'town'\r\n# UNION\r\n# SELECT \r\n#     ST_BUFFER(way, 450) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE building NOT IN ('yes', 'residential', 'apartments', 'house', 'static_caravan', 'detached')\r\n# UNION\r\n# SELECT \r\n#     ST_BUFFER(way, 7500) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE aeroway IS NOT NULL\r\n# UNION\r\n# SELECT \r\n#     ST_BUFFER(way, 0) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE military IS NOT NULL\r\n#     OR landuse = 'military'\r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 300) as way\r\n#     FROM planet_osm_line \r\n#     WHERE (railway IS NOT NULL\r\n#     AND railway NOT IN ('abandoned', 'disused', \r\n#                         'razed', 'dismantled'))\r\n#     OR (highway IS NOT NULL\r\n#     AND highway IN ('motorway', 'motorway_link',\r\n#                     'trunk', 'trunk_link', 'road',\r\n#                     'primary', 'primary_link',\r\n#                     'secondary', 'secondary_link'))\r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 150) as way\r\n#     FROM planet_osm_line \r\n#     WHERE waterway IN ('river')\r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 0) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE leisure IN ('nature_reserve', 'park')\r\n#     OR \"natural\" IN ('wetland')\r\n# UNION\r\n# SELECT \r\n#     ST_BUFFER(way, 0) as way\r\n#     FROM planet_osm_polygon\r\n#     WHERE water IN ('lake')\r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 300) as way\r\n#     FROM planet_osm_line \r\n#     WHERE power IS NOT NULL \r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 150) as way\r\n#     FROM planet_osm_polygon \r\n#     WHERE power IS NOT NULL\r\n# UNION\r\n# SELECT  \r\n#     ST_BUFFER(way, 680) as way\r\n#     FROM planet_osm_point \r\n#     WHERE \"generator:source\" IS NOT NULL\r\n#     AND \"generator:source\" IN ('wind')\r\n#     \"\"\"\r\n# siting_constraints = gpd.read_postgis(sql_siting_constraints, con = engine, geom_col = 'way')\r\nfig, ax = plt.subplots(figsize=(8, 8))\r\nsiting_constraints.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .5)\r\nax.grid(True, color = 'dimgray')\r\nax.set_title('Siting Constraints (Scenario 1)', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs=\"EPSG:26975\")\r\npngfig, ax = plt.subplots(figsize=(8, 8))\r\nsiting_constraints_2.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .5)\r\nax.grid(True, color = 'dimgray')\r\nax.set_title('Siting Constraints (Scenario 2)', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs=\"EPSG:26975\")\r\npngWind Data\r\nThe table wind_cells_10000 contains 10 km2 square polygons with associated average annual wind speeds (m s-1), arranged to cover Iowa in a ragged grid.\r\nsql_wind_speeds = \\\r\n\"\"\"\r\nSELECT * \r\nFROM \r\n    wind_cells_10000 \r\nWHERE \r\n    wind_speed IS NOT NULL\r\n\"\"\"\r\nwind_speeds = gpd.read_postgis(sql_wind_speeds, con = engine, geom_col = 'geom')\r\nResults\r\nScenario #1\r\nSubtract Siting Constraints from Wind Cells\r\nsuitable_cells = wind_speeds.overlay(siting_constraints, how = 'difference', keep_geom_type = False)\r\nPlot Suitable Wind Cells\r\nfig, ax = plt.subplots(figsize=(8, 8))\r\nsuitable_cells.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .5)\r\nax.grid(True, color = 'dimgray')\r\nax.set_title('Suitable Areas (Scenario 1)', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs=\"EPSG:26975\")\r\npngFind Number of Turbines\r\nrotor_5x = math.pi * (136 * 5) ** 2\r\nsuitable_cells[\"area\"] = suitable_cells['geom'].area\r\nsuitable_cells[\"number_wind_turbines\"] = suitable_cells['geom'].area / rotor_5x\r\ntotal_wind_turbines = suitable_cells[\"number_wind_turbines\"].sum()\r\nprint(\"The total number of turbines in scenario 1 is:\", round(total_wind_turbines))\r\nThe total number of turbines in scenario 1 is: 57286\r\nPower production\r\nsuitable_cells['energy_per_turbine'] = 2.6 * suitable_cells['wind_speed'] - 5\r\nsuitable_cells['power_per_cell'] = suitable_cells['energy_per_turbine'] * suitable_cells['number_wind_turbines']\r\nTotal Power Production\r\ntotal_scenario_1 = suitable_cells['power_per_cell'].sum()\r\nprint(\"The total power produced in scenario 1 is:\", round(total_scenario_1), \"GWH/year\")\r\nThe total power produced in scenario 1 is: 1064159 GWH/year\r\nScenario #2\r\nSubtract Siting Constraints from Wind Cells\r\nsuitable_cells_2 = wind_speeds.overlay(siting_constraints_2, how = 'difference', keep_geom_type = False)\r\nPlot Suitable Wind Cells\r\nfig, ax = plt.subplots(figsize=(8, 8))\r\nsuitable_cells_2.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .5)\r\nax.grid(True, color = 'dimgray')\r\nax.set_title('Suitable Areas (Scenario 2)', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs=\"EPSG:26975\")\r\npngFind Number of Turbines\r\nrotor_5x = math.pi * (136 * 5) ** 2\r\nsuitable_cells_2[\"area\"] = suitable_cells_2['geom'].area\r\nsuitable_cells_2[\"number_wind_turbines\"] = suitable_cells_2['geom'].area / rotor_5x\r\ntotal_wind_turbines_2 = suitable_cells_2[\"number_wind_turbines\"].sum()\r\nprint(\"The total number of turbines in scenario 2 is:\", round(total_wind_turbines_2))\r\nThe total number of turbines in scenario 2 is: 52055\r\nPower Production\r\nsuitable_cells_2['energy_per_turbine'] = 2.6 * suitable_cells_2['wind_speed'] - 5\r\nsuitable_cells_2['power_per_cell'] = suitable_cells_2['energy_per_turbine'] * suitable_cells_2['number_wind_turbines']\r\nwind_speeds\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\nid\r\n\r\n\r\ngeom\r\n\r\n\r\nwind_speed\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\nPOLYGON ((1256222.769 1212179.582, 1266222.769…\r\n\r\n\r\n9.336039\r\n\r\n\r\n1\r\n\r\n\r\n2\r\n\r\n\r\nPOLYGON ((1266222.769 1212179.582, 1276222.769…\r\n\r\n\r\n9.097315\r\n\r\n\r\n2\r\n\r\n\r\n3\r\n\r\n\r\nPOLYGON ((1276222.769 1212179.582, 1286222.769…\r\n\r\n\r\n8.984566\r\n\r\n\r\n3\r\n\r\n\r\n4\r\n\r\n\r\nPOLYGON ((1286222.769 1212179.582, 1296222.769…\r\n\r\n\r\n9.266137\r\n\r\n\r\n4\r\n\r\n\r\n5\r\n\r\n\r\nPOLYGON ((1296222.769 1212179.582, 1306222.769…\r\n\r\n\r\n9.296747\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n1437\r\n\r\n\r\n1438\r\n\r\n\r\nPOLYGON ((1686222.769 902179.582, 1696222.769 …\r\n\r\n\r\n8.678687\r\n\r\n\r\n1438\r\n\r\n\r\n1439\r\n\r\n\r\nPOLYGON ((1426222.769 892179.582, 1436222.769 …\r\n\r\n\r\n9.114730\r\n\r\n\r\n1439\r\n\r\n\r\n1440\r\n\r\n\r\nPOLYGON ((1656222.769 892179.582, 1666222.769 …\r\n\r\n\r\n8.237385\r\n\r\n\r\n1440\r\n\r\n\r\n1441\r\n\r\n\r\nPOLYGON ((1666222.769 892179.582, 1676222.769 …\r\n\r\n\r\n8.423034\r\n\r\n\r\n1441\r\n\r\n\r\n1442\r\n\r\n\r\nPOLYGON ((1666222.769 882179.582, 1676222.769 …\r\n\r\n\r\n8.109468\r\n\r\n\r\n1442 rows × 3 columns\r\n\r\n\r\nTotal Power Production\r\ntotal_scenario_2 = suitable_cells_2['power_per_cell'].sum()\r\nprint(\"The total power produced in scenario 2 is:\", round(total_scenario_2), \" GWH/year\")\r\nThe total power produced in scenario 2 is: 967009  GWH/year\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-03T10:03:40-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-03-protecting-whales-from-ships/",
    "title": "Protecting Whales From Ships",
    "description": "A vessel speed reduction zone is a potential solution to reducing ship strikes with whales near Dominica. The goal of this   analysis is to look at sperm whale sighting data, and AIS vessel data, to determine a vessel speed reduction zone, and the effects implementing a vessel speed reduction zone would have on shipping activities in the zone.",
    "author": [
      {
        "name": "Cullen Molitor",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\nHomework # 3\r\nProtecting Whales From Ships\r\nGroup # 2\r\nCullen Molitor\r\nAmber McEldowney\r\nSetup\r\nImport Modules\r\nimport geopandas as gpd \r\nimport rasterio as rio\r\nfrom rasterio.plot import show\r\nimport numpy as np\r\nimport pandas as pd\r\nimport matplotlib.image as mpimg\r\nimport matplotlib.pyplot as plt\r\nimport os\r\nimport glob\r\nimport contextily as ctx\r\nimport shapely\r\nfrom shapely.geometry import Polygon\r\n%matplotlib inline\r\nParameters\r\nshoreline_shapefile  = 'data/dominica/dma_admn_adm0_py_s1_dominode_v2.shp'\r\nwhales_CSV           = 'data/sightings2005_2018.csv'\r\nvessels_CSV          = 'data/station1249.csv'\r\nConstants\r\nten_kn_in_ms = 5.14\r\nprojected_EPSG = 2002   # Dominica 1945 / British West Indies Grid\r\ngeodetic_EPSG  = 4326   # WGS 84 (use as default CRS for incoming latlon)\r\nLoad Dominica Shape File\r\ndominica_shp = gpd.read_file(shoreline_shapefile)\r\ndominica_shp.head()\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\nADM0_PCODE\r\n\r\n\r\nADM0_EN\r\n\r\n\r\ngeometry\r\n\r\n\r\n0\r\n\r\n\r\nDM\r\n\r\n\r\nDominica\r\n\r\n\r\nPOLYGON ((-61.43023 15.63952, -61.43019 15.639…\r\n\r\n\r\nInspect CRS\r\ndominica_shp.crs\r\n<Geographic 2D CRS: EPSG:4326>\r\nName: WGS 84\r\nAxis Info [ellipsoidal]:\r\n- Lat[north]: Geodetic latitude (degree)\r\n- Lon[east]: Geodetic longitude (degree)\r\nArea of Use:\r\n- name: World.\r\n- bounds: (-180.0, -90.0, 180.0, 90.0)\r\nDatum: World Geodetic System 1984 ensemble\r\n- Ellipsoid: WGS 84\r\n- Prime Meridian: Greenwich\r\nSet CRS\r\nEPSG 2002\r\ndominica_shp = dominica_shp.to_crs(projected_EPSG)\r\ndominica_shp.crs\r\n<Projected CRS: EPSG:2002>\r\nName: Dominica 1945 / British West Indies Grid\r\nAxis Info [cartesian]:\r\n- E[east]: Easting (metre)\r\n- N[north]: Northing (metre)\r\nArea of Use:\r\n- name: Dominica - onshore.\r\n- bounds: (-61.55, 15.14, -61.2, 15.69)\r\nCoordinate Operation:\r\n- name: British West Indies Grid\r\n- method: Transverse Mercator\r\nDatum: Dominica 1945\r\n- Ellipsoid: Clarke 1880 (RGS)\r\n- Prime Meridian: Greenwich\r\nPlot Dominica\r\nfig, ax = plt.subplots(figsize=(5, 5))\r\nax.grid(True, color = 'dimgray')\r\nax.set(ylim=(1.67e6,1.74e6), xlim=(445000, 490000))\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\ndominica_shp.plot(ax = ax, edgecolor = \"k\", facecolor=\"None\")\r\nctx.add_basemap(ax, crs=projected_EPSG)\r\npngLoad Whale Sightings Data\r\nwhales = gpd.read_file(whales_CSV)\r\nwhales\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\nfield_1\r\n\r\n\r\nGPStime\r\n\r\n\r\nLat\r\n\r\n\r\nLong\r\n\r\n\r\ngeometry\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n2005-01-15 07:43:27\r\n\r\n\r\n15.36977117\r\n\r\n\r\n-61.49328433\r\n\r\n\r\nNone\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n2005-01-15 08:07:13\r\n\r\n\r\n15.3834075\r\n\r\n\r\n-61.503702\r\n\r\n\r\nNone\r\n\r\n\r\n2\r\n\r\n\r\n2\r\n\r\n\r\n2005-01-15 08:31:17\r\n\r\n\r\n15.38106333\r\n\r\n\r\n-61.50486067\r\n\r\n\r\nNone\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n2005-01-15 09:19:10\r\n\r\n\r\n15.33532083\r\n\r\n\r\n-61.46858117\r\n\r\n\r\nNone\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n2005-01-15 10:08:00\r\n\r\n\r\n15.294224\r\n\r\n\r\n-61.45318517\r\n\r\n\r\nNone\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n4888\r\n\r\n\r\n4888\r\n\r\n\r\n2018-05-25 12:01:25\r\n\r\n\r\n15.39195\r\n\r\n\r\n-61.572\r\n\r\n\r\nNone\r\n\r\n\r\n4889\r\n\r\n\r\n4889\r\n\r\n\r\n2018-05-25 13:08:29\r\n\r\n\r\n15.4189\r\n\r\n\r\n-61.5833\r\n\r\n\r\nNone\r\n\r\n\r\n4890\r\n\r\n\r\n4890\r\n\r\n\r\n2018-05-25 14:50:00\r\n\r\n\r\n15.443483\r\n\r\n\r\n-61.60995\r\n\r\n\r\nNone\r\n\r\n\r\n4891\r\n\r\n\r\n4891\r\n\r\n\r\n2018-05-25 15:57:34\r\n\r\n\r\n15.499866\r\n\r\n\r\n-61.638333\r\n\r\n\r\nNone\r\n\r\n\r\n4892\r\n\r\n\r\n4892\r\n\r\n\r\n2018-05-25 16:17:10\r\n\r\n\r\n15.494783\r\n\r\n\r\n-61.6482\r\n\r\n\r\nNone\r\n\r\n\r\n4893 rows × 5 columns\r\n\r\n\r\nCreate GeoDataFrame\r\npoints = gpd.points_from_xy(whales['Long'], whales['Lat'], crs = geodetic_EPSG)\r\nwhales_gdf = gpd.GeoDataFrame(whales, geometry = points)\r\nSet CRS\r\nwhales_gdf = whales_gdf.to_crs(projected_EPSG)\r\nPlot Whale Sightings\r\nfig, ax = plt.subplots(figsize = (10, 10))\r\nax.set_aspect('equal')\r\nax.grid(True, color = 'dimgray')\r\nax.set(xlim=(4e5, 5e5), ylim=(1.5e6, 1.8e6))\r\ndominica_shp.plot(ax = ax, color='None', edgecolor = \"k\")\r\nwhales_gdf.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .25)\r\nax.set_title('Whale Sightings', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs = projected_EPSG)\r\npngCreate Grid\r\nxmin, ymin, xmax, ymax = whales_gdf.total_bounds\r\ncell_size = 2000\r\nxs = list(np.arange(xmin, xmax + cell_size, cell_size))\r\nys = list(np.arange(ymin, ymax + cell_size, cell_size))\r\ndef make_cell(x, y, cell_size):\r\n    ring = [\r\n        (x, y),\r\n        (x + cell_size, y),\r\n        (x + cell_size, y + cell_size),\r\n        (x, y + cell_size)\r\n    ]\r\n    cell = shapely.geometry.Polygon(ring)\r\n    return cell\r\ncells = []\r\nfor x in xs:\r\n    for y in ys:\r\n        cell = make_cell(x, y, cell_size)\r\n        cells.append(cell)\r\nCreate GeoDataFrame\r\ngrid = gpd.GeoDataFrame({'geometry': cells}, crs = geodetic_EPSG)\r\nSet CRS\r\ngrid = grid.set_geometry(crs = projected_EPSG, col = grid['geometry'])\r\nPlot Grid\r\ngrid.plot(facecolor = \"none\", figsize = (10, 10), linewidth = 1)\r\n<AxesSubplot:>\r\npngExtract Whale Habitat\r\nwhale_grid = grid.sjoin(whales_gdf, how=\"inner\")\r\nPlot Whale Grid\r\nwhale_grid.plot(facecolor = \"none\", figsize = (10, 10), linewidth = .75)\r\n<AxesSubplot:>\r\npngSummarise Whale Counts\r\ngrid['count'] = whale_grid.groupby(whale_grid.index).count()['index_right']\r\nFind Primary Whale Habitat\r\ngrid = grid[grid['count'] > 20]\r\nPlot Whale Habitat\r\ngrid.plot(facecolor = \"none\", figsize = (10, 10), linewidth = .75)\r\n<AxesSubplot:>\r\npngCreate Unary Union\r\ngrid_union = grid.unary_union\r\ngrid_union\r\nsvgCreate Vessel Speed Reduction Zone\r\nThe vessel speed reduction zone is determined by the whale habitat areas in which more than 20 whales were observed per 2,000 m².\r\ngrid_convex = grid_union.convex_hull\r\ngrid_convex\r\nsvgMake GeoDataFrame\r\nwhale_habitat = gpd.GeoDataFrame(index = [0], geometry = [grid_convex], crs = projected_EPSG)\r\nPlot Whale Habitat\r\nfig, ax = plt.subplots(figsize = (10, 10))\r\nax.grid(True, color = 'dimgray')\r\nax.set(xlim=(4.4e5, 4.85e5), ylim=(1.675e6, 1.73e6))\r\ndominica_shp.plot(ax = ax, color='None', edgecolor = \"k\")\r\nwhale_habitat.plot(ax = ax, edgecolor = \"purple\", facecolor = 'none')\r\nax.set_title('Whale Habitat', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs = projected_EPSG)\r\npngwhale_habitat_diff = whale_habitat.difference(dominica_shp)\r\nwhale_habitat = gpd.GeoDataFrame(geometry = whale_habitat_diff)\r\nwhale_habitat\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\ngeometry\r\n\r\n\r\n0\r\n\r\n\r\nPOLYGON ((456480.652 1682792.746, 454480.652 1…\r\n\r\n\r\nfig, ax = plt.subplots(figsize = (10, 10))\r\nax.grid(True, color = 'dimgray')\r\nax.set(xlim=(4.4e5, 4.85e5), ylim=(1.675e6, 1.73e6))\r\ndominica_shp.plot(ax = ax, color='None', edgecolor = \"k\")\r\nwhale_habitat.plot(ax = ax, edgecolor = \"purple\", facecolor = 'none')\r\nax.set_title('Whale Habitat', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs = projected_EPSG)\r\npngwhale_habitat\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\ngeometry\r\n\r\n\r\n0\r\n\r\n\r\nPOLYGON ((456480.652 1682792.746, 454480.652 1…\r\n\r\n\r\nLoad AIS Vessel Data\r\nvessels = gpd.read_file(vessels_CSV)\r\npoints = gpd.points_from_xy(vessels['LON'], vessels['LAT'], crs = geodetic_EPSG)\r\nCreate GeoDataFrame\r\nvessels_gdf = gpd.GeoDataFrame(vessels, geometry = points)\r\nvessels_gdf\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\nfield_1\r\n\r\n\r\nMMSI\r\n\r\n\r\nLON\r\n\r\n\r\nLAT\r\n\r\n\r\nTIMESTAMP\r\n\r\n\r\ngeometry\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n233092000\r\n\r\n\r\n-61.84788\r\n\r\n\r\n15.23238\r\n\r\n\r\n2015-05-22 13:53:26\r\n\r\n\r\nPOINT (-61.84788 15.23238)\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n255803280\r\n\r\n\r\n-61.74397\r\n\r\n\r\n15.96114\r\n\r\n\r\n2015-05-22 13:52:57\r\n\r\n\r\nPOINT (-61.74397 15.96114)\r\n\r\n\r\n2\r\n\r\n\r\n2\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.38968\r\n\r\n\r\n15.29744\r\n\r\n\r\n2015-05-22 13:52:32\r\n\r\n\r\nPOINT (-61.38968 15.29744)\r\n\r\n\r\n3\r\n\r\n\r\n3\r\n\r\n\r\n257674000\r\n\r\n\r\n-61.54395\r\n\r\n\r\n16.2334\r\n\r\n\r\n2015-05-22 13:52:24\r\n\r\n\r\nPOINT (-61.54395 16.23340)\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\n636092006\r\n\r\n\r\n-61.52401\r\n\r\n\r\n15.81954\r\n\r\n\r\n2015-05-22 13:51:23\r\n\r\n\r\nPOINT (-61.52401 15.81954)\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n617257\r\n\r\n\r\n238722\r\n\r\n\r\n256525000\r\n\r\n\r\n-61.40679\r\n\r\n\r\n15.36907\r\n\r\n\r\n2015-05-21 21:34:59\r\n\r\n\r\nPOINT (-61.40679 15.36907)\r\n\r\n\r\n617258\r\n\r\n\r\n238723\r\n\r\n\r\n311077100\r\n\r\n\r\n-61.37539\r\n\r\n\r\n15.27406\r\n\r\n\r\n2015-05-21 21:34:55\r\n\r\n\r\nPOINT (-61.37539 15.27406)\r\n\r\n\r\n617259\r\n\r\n\r\n238724\r\n\r\n\r\n377907247\r\n\r\n\r\n-61.39461\r\n\r\n\r\n15.30672\r\n\r\n\r\n2015-05-21 21:34:46\r\n\r\n\r\nPOINT (-61.39461 15.30672)\r\n\r\n\r\n617260\r\n\r\n\r\n238725\r\n\r\n\r\n253365000\r\n\r\n\r\n-61.49001\r\n\r\n\r\n16.14007\r\n\r\n\r\n2015-05-21 21:34:46\r\n\r\n\r\nPOINT (-61.49001 16.14007)\r\n\r\n\r\n617261\r\n\r\n\r\n238726\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.48073\r\n\r\n\r\n15.44751\r\n\r\n\r\n2015-05-21 21:34:45\r\n\r\n\r\nPOINT (-61.48073 15.44751)\r\n\r\n\r\n617262 rows × 6 columns\r\n\r\n\r\nSet CRS\r\nvessels_gdf = vessels_gdf.to_crs(projected_EPSG)\r\nMake TIMESTAMP datetime\r\nvessels_gdf['TIMESTAMP'] = pd.to_datetime(vessels_gdf['TIMESTAMP'])\r\nSelect Vessels Inside Whale Habitat\r\nvessels_whale = vessels_gdf.sjoin(whale_habitat, how = 'inner')\r\nvessels_whale\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\nfield_1\r\n\r\n\r\nMMSI\r\n\r\n\r\nLON\r\n\r\n\r\nLAT\r\n\r\n\r\nTIMESTAMP\r\n\r\n\r\ngeometry\r\n\r\n\r\nindex_right\r\n\r\n\r\n2\r\n\r\n\r\n2\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.38968\r\n\r\n\r\n15.29744\r\n\r\n\r\n2015-05-22 13:52:32\r\n\r\n\r\nPOINT (464555.392 1690588.725)\r\n\r\n\r\n0\r\n\r\n\r\n7\r\n\r\n\r\n7\r\n\r\n\r\n338143127\r\n\r\n\r\n-61.39575\r\n\r\n\r\n15.33418\r\n\r\n\r\n2015-05-22 13:50:54\r\n\r\n\r\nPOINT (463892.452 1694650.397)\r\n\r\n\r\n0\r\n\r\n\r\n13\r\n\r\n\r\n13\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.38968\r\n\r\n\r\n15.29745\r\n\r\n\r\n2015-05-22 13:48:32\r\n\r\n\r\nPOINT (464555.389 1690589.831)\r\n\r\n\r\n0\r\n\r\n\r\n15\r\n\r\n\r\n15\r\n\r\n\r\n338143015\r\n\r\n\r\n-61.39558\r\n\r\n\r\n15.33423\r\n\r\n\r\n2015-05-22 13:47:31\r\n\r\n\r\nPOINT (463910.683 1694655.978)\r\n\r\n\r\n0\r\n\r\n\r\n16\r\n\r\n\r\n16\r\n\r\n\r\n338143127\r\n\r\n\r\n-61.39757\r\n\r\n\r\n15.33139\r\n\r\n\r\n2015-05-22 13:47:25\r\n\r\n\r\nPOINT (463697.964 1694341.275)\r\n\r\n\r\n0\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n…\r\n\r\n\r\n617252\r\n\r\n\r\n238717\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.4885\r\n\r\n\r\n15.4706\r\n\r\n\r\n2015-05-21 21:37:45\r\n\r\n\r\nPOINT (453901.647 1709712.916)\r\n\r\n\r\n0\r\n\r\n\r\n617253\r\n\r\n\r\n238718\r\n\r\n\r\n338143015\r\n\r\n\r\n-61.39553\r\n\r\n\r\n15.33448\r\n\r\n\r\n2015-05-21 21:37:14\r\n\r\n\r\nPOINT (463915.972 1694683.643)\r\n\r\n\r\n0\r\n\r\n\r\n617255\r\n\r\n\r\n238720\r\n\r\n\r\n338143127\r\n\r\n\r\n-61.39563\r\n\r\n\r\n15.33468\r\n\r\n\r\n2015-05-21 21:35:12\r\n\r\n\r\nPOINT (463905.177 1694705.734)\r\n\r\n\r\n0\r\n\r\n\r\n617259\r\n\r\n\r\n238724\r\n\r\n\r\n377907247\r\n\r\n\r\n-61.39461\r\n\r\n\r\n15.30672\r\n\r\n\r\n2015-05-21 21:34:46\r\n\r\n\r\nPOINT (464023.288 1691613.624)\r\n\r\n\r\n0\r\n\r\n\r\n617261\r\n\r\n\r\n238726\r\n\r\n\r\n329002300\r\n\r\n\r\n-61.48073\r\n\r\n\r\n15.44751\r\n\r\n\r\n2015-05-21 21:34:45\r\n\r\n\r\nPOINT (454741.236 1707161.130)\r\n\r\n\r\n0\r\n\r\n\r\n167402 rows × 7 columns\r\n\r\n\r\nPlot Vessel Data\r\nfig, ax = plt.subplots(figsize = (10, 10))\r\nax.grid(True, color = 'dimgray')\r\nax.set(xlim=(4.4e5, 4.85e5), ylim=(1.675e6, 1.73e6))\r\ndominica_shp.plot(ax = ax, color='None', edgecolor = \"k\")\r\nvessels_whale.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .1)\r\nax.set_title('Vessel Data Inside Whale Habitat', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs = projected_EPSG)\r\npngCalculate Vessel Speeds\r\nSort\r\nvessels_whale_sorted = vessels_whale.sort_values(['MMSI', 'TIMESTAMP'])\r\nMake Copy and Shift\r\nvessels_whale_shifted = vessels_whale_sorted.shift(periods = 1)\r\nJoin Sorted With Shifted\r\nvw_sorted_shifted = vessels_whale_sorted.join(vessels_whale_shifted, lsuffix = \"_original\", rsuffix = \"_copy\")\r\nMatch MMSI Numbers\r\nvw_matched = vw_sorted_shifted[vw_sorted_shifted['MMSI_original'] == vw_sorted_shifted['MMSI_copy']]\r\nSet Geometires\r\nvw_matched = vw_matched.set_geometry(col = vw_matched['geometry_original'], crs = projected_EPSG)\r\nFind the Distance (in meters - m)\r\nvw_matched['distance_m'] = vw_matched['geometry_original'].distance(vw_matched['geometry_copy']) \r\nFind the Elapsed Time (seconds - s)\r\nvw_matched['time_s'] = vw_matched['TIMESTAMP_original'] - vw_matched['TIMESTAMP_copy']\r\nvw_matched['time_s'] = vw_matched['time_s'].dt.total_seconds() \r\nFind the Speed (meters per seconds - ms)\r\nvw_matched['speed_ms'] = vw_matched['distance_m'] / vw_matched['time_s']\r\nvw_matched['10_kn_time'] = vw_matched['distance_m'] / ten_kn_in_ms\r\nvw_matched['time_diff'] = vw_matched['10_kn_time'].sub(vw_matched['time_s'])\r\nvw_matched = vw_matched[vw_matched['time_diff'] > 0]\r\nPlot Vessels travelling over 10 knots\r\nfig, ax = plt.subplots(figsize = (10, 10))\r\nax.grid(True, color = 'dimgray')\r\nax.set(xlim=(4.4e5, 4.85e5), ylim=(1.675e6, 1.73e6))\r\ndominica_shp.plot(ax = ax, color='None', edgecolor = \"k\")\r\nvw_matched.plot(ax = ax, markersize = .1, color = \"purple\", alpha = .25)\r\nax.set_title('Vessel Data Inside Whale Habitat', fontsize=12)\r\nax.ticklabel_format(scilimits =  [-5, 5])\r\nctx.add_basemap(ax, crs = projected_EPSG)\r\npngView Summary Stats\r\nvw_matched[['distance_m', 'time_s', 'speed_ms']].describe()\r\n\r\n\r\n    .dataframe tbody tr th:only-of-type {\r\n        vertical-align: middle;\r\n    }\r\n\r\n    .dataframe tbody tr th {\r\n        vertical-align: top;\r\n    }\r\n\r\n    .dataframe thead th {\r\n        text-align: right;\r\n    }\r\n\r\n\r\n\r\ndistance_m\r\n\r\n\r\ntime_s\r\n\r\n\r\nspeed_ms\r\n\r\n\r\ncount\r\n\r\n\r\n21282.000000\r\n\r\n\r\n21282.000000\r\n\r\n\r\n2.128200e+04\r\n\r\n\r\nmean\r\n\r\n\r\n1602.087151\r\n\r\n\r\n198.250728\r\n\r\n\r\ninf\r\n\r\n\r\nstd\r\n\r\n\r\n1473.334485\r\n\r\n\r\n187.465984\r\n\r\n\r\nNaN\r\n\r\n\r\nmin\r\n\r\n\r\n64.542545\r\n\r\n\r\n0.000000\r\n\r\n\r\n5.140343e+00\r\n\r\n\r\n25%\r\n\r\n\r\n838.258302\r\n\r\n\r\n120.000000\r\n\r\n\r\n5.949960e+00\r\n\r\n\r\n50%\r\n\r\n\r\n1150.938066\r\n\r\n\r\n141.000000\r\n\r\n\r\n6.826952e+00\r\n\r\n\r\n75%\r\n\r\n\r\n1805.137371\r\n\r\n\r\n181.000000\r\n\r\n\r\n8.696041e+00\r\n\r\n\r\nmax\r\n\r\n\r\n28330.585863\r\n\r\n\r\n4085.000000\r\n\r\n\r\ninf\r\n\r\n\r\nImpact of a 10 knot Speed Reduction Zone\r\nWe calculated that ship vessel traffic would be slowed by 2 minutes per mile on average. Over the course of the year, this equated to approximately 28 days of increased shipping time.\r\nnum_days = vw_matched['time_diff'].sum() / 60 / 60 /24\r\nnum_days\r\n27.9423247732646\r\nmean_time_lost = vw_matched['time_diff'].mean() / 60\r\nmean_time_lost\r\n1.8906563139508044\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-12-03T08:27:45-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-12-01-eds-222-final-project-species-density-sst/",
    "title": "Species Density ~ SST + lag(SST)\n",
    "description": {},
    "author": [
      {
        "name": "Cullen Molitor",
        "url": {}
      }
    ],
    "date": "2021-12-01",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nMotivation\r\nData\r\nAnalysis\r\nResults\r\nCold-water species\r\nWarm-water species\r\n\r\nFuture Work\r\nBetter Models\r\nMore Protocols/Species\r\nIntegrate Program Data\r\n\r\nCode Availability\r\nLiterature Cited\r\n\r\nMotivation\r\nCalifornia’s Northern Channel Islands sit at the transition between two biogeographic provinces, the cold-water North Pacific and the warm-water Gulf of California. San Miguel and Santa Rosa Islands have species representative of the North Pacific province while Anacapa and Santa Barbara Islands sit firmly in the Gulf of California province. Santa Cruz Island lies in the transition zone with the western end of the island favoring North Pacific species and the eastern end favoring Gulf of California species. This makes the Northern Channel Islands a unique place to study how species distribution and recruitment respond to ocean temperatures.\r\n\r\n\r\nhide\r\n\r\nknitr::include_graphics(\"biogeo.png\")\r\n\r\n\r\n\r\n\r\n      Figure 1. The Southern California Bight (SCB) shown with a composite sea\r\n      surface temperatures (SST) color gradient for 2009. This SST is typical of\r\n      the region and illustrates the transition between the North Pacific and Gulf\r\n      of California biogegeographic provinces (Image taken from Freedman 2020).\r\n\r\nThe El Niño Southern Oscillation (ENSO) is measured primarily by the Oceanic Niño Index which calculates a SST anomaly value value each month going back to 1950. These values are derived from SST in the equatorial pacific (\\(\\pm5^{\\circ}\\) latitude, \\(120^{\\circ}-170^{\\circ}W\\) longitude). The patterns of SST in this region are responsible for driving certain global weather and climate patterns. Despite the distance from this region, ENSO has a large effect on the oceanographic conditions of the SCB and the Channel Islands. This effect includes an influence on local SST as well as the strength and direction of ocean currents. These effects are known to influence the distribution and abundance of certain marine species (Day 2018, Freedman 2020).\r\nThis analysis takes a shotgun approach to investigate which species are sensitive to either warm-water or cold-water events by using a series of species-level dynamic linear models with lag SST anomalies as predictor variables. These models will provide a broad overview of which species are affected, how they are affected, and whether or not the affect is statistically significant. This will inform our understanding of how species distribution and population ranges might be affected by changing oceanographic conditions due to climate change.\r\nData\r\nThe Kelp Forest Monitoring (KFM) program at Channel Islands National Park has been collecting abundance and size distribution data of more than 170 species since 1982 (sampled annually). The park currently samples 33 sites at the five islands in the National Park. This data is publicly available and was requested and issued under a scientific research and collecting permit (permit #: CHIS-2020-SCI-0006). These data are collected using scuba surveys where the biologists attempt to minimize their impact on the reef by using non-invasive sampling methods. This means that animals are counted in situ and no rocks are overturned or species removed. This inevitably biases the data towards adult populations of certain invertebrates that utilize crevice habitat during development as they will be hidden from direct observation.\r\nThe fish data is collected in (#\\(/m^3\\)). In order to assure that all data are in the same units, only measurements of invertebrate and algae density (#\\(/m^2\\)) are retained. This takes the total number of species with density data from 151 down to 35. Using species density, we can identify trends in abundance observed over multiple El Niño (warm-water) and La Niña (cold-water) events. Using a dynamic linear model with lag independent variables we can see the effect of sea surface temperature anomalies during and in the years following these events on species density.\r\nBelow we read in ENSO data and calculate yearly mean anomalies before making 5 new columns with corresponding lag values. We then load in the species density data and filter out fish and 2 species which are exceedingly rare and do not have enough data to model. This leaves us with 33 species to model, all with the same units.\r\n\r\n\r\nhide\r\n\r\n# Load libraries\r\nlibrary(tidyverse)\r\nlibrary(here)\r\nlibrary(lubridate)\r\nlibrary(broom)\r\nlibrary(arrow)\r\nlibrary(plotly)\r\n\r\n# Load and Tidy Data\r\noni_yearly <-  # Read in Oceanic Nino Index region 3.4 data\r\n  read.table(\r\n    \"https://origin.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/detrend.nino34.ascii.txt\",\r\n    header = T) %>%\r\n  # rename YR for joining tables\r\n  dplyr::rename(SurveyYear = YR) %>% \r\n  dplyr::group_by(SurveyYear) %>% \r\n  # Calculate yearly SST Anom\r\n  dplyr::summarise(SST_Anom = mean(ANOM)) %>% \r\n  # Create lagged SST\r\n  dplyr::mutate(SST_Anom_1 = lag(SST_Anom, n = 1),\r\n                SST_Anom_2 = lag(SST_Anom, n = 2),\r\n                SST_Anom_3 = lag(SST_Anom, n = 3),\r\n                SST_Anom_4 = lag(SST_Anom, n = 4),\r\n                SST_Anom_5 = lag(SST_Anom, n = 5))\r\n\r\n\r\ndensity <-  # Read in Density data\r\n  arrow::read_feather(\"Density.feather\") %>%\r\n  dplyr::filter(Classification != \"Fish\",\r\n                !CommonName %in% c(\"wakame, adult\", \r\n                                   \"wakame, juvenile\", \r\n                                   \"white abalone\")) %>% \r\n  dplyr::left_join(oni_yearly)\r\n\r\n\r\n\r\nAnalysis\r\nThis analysis will use a general model formula of lm(Mean_Density ~ SST_Anom + SST_Anom_1 + SST_Anom_2 + SST_Anom_3 + SST_Anom_4 + SST_Anom_5) applied to density data grouped by each species scientific name. These five lag periods will show how a species is affected within the same year, and for the next five years following anomalous warm or cold water. We expect recruitment of certain species will either increases or decreases following warmer than usual or colder than usual ocean temperatures. Given what we know about the life cycle of many marine species, it is reasonable to assume these effects would not be detected by non-invasive sampling techniques for 1-5 years following anomalous temperatures.\r\nThis analysis is simplified to detect trends in a large number of species and does not take into account the effect of biogeography. This also does not consider the impact of marine protected areas (MPAs) which potentially buffer the ecological community from the effects of abiotic factors such as SST. MPAs could also have an effect from increased predation to some of these species, potentially limiting their abundance.\r\nThe cumulative effect on all species will be plotted. Then the results will be filtered to only include significant affects and sorted by the estimated slope of their relationship. The two species with the most positive slope and the two with the most negative slope will have their coefficients plotted over the lag periods.\r\n\r\n\r\nhide\r\n\r\nResults_lag <- density %>% \r\n  dplyr::group_by(ScientificName) %>%\r\n  dplyr::summarise(\r\n    generics::tidy(\r\n      stats::lm(\r\n        Mean_Density ~ SST_Anom + SST_Anom_1 + SST_Anom_2 + SST_Anom_3 + SST_Anom_4 + SST_Anom_5\r\n        ))) %>% \r\n  dplyr::filter(term != \"(Intercept)\") %>% \r\n  dplyr::mutate(significant = ifelse(p.value <= .05, \"yes\", \"no\"))\r\n\r\n\r\n\r\nResults\r\n\r\n\r\nhide\r\n\r\nResults_filtered <- Results_lag %>%\r\n  dplyr::filter(p.value <= .05) %>% \r\n  dplyr::arrange(estimate) %>%\r\n  dplyr::mutate(statistic = round(statistic, 3),\r\n                p.value = round(p.value, 3),\r\n                p.value = ifelse(p.value < 0.001, \"< 0.001\", as.character(p.value))) \r\ncold_sp <- Results_filtered %>% \r\n  arrange(estimate) %>% \r\n  distinct(ScientificName) %>% \r\n  head(3) %>% \r\n  pull()\r\n\r\nwarm_sp <- Results_filtered %>% \r\n  arrange(desc(estimate)) %>% \r\n  distinct(ScientificName) %>% \r\n  head(3) %>% \r\n  pull()\r\n\r\ncold <- Results_lag %>% \r\n  group_by(ScientificName) %>% \r\n  mutate(cum_est = cumsum(estimate)) %>% \r\n  filter(ScientificName %in% cold_sp)\r\n\r\nwarm <- Results_lag %>% \r\n  group_by(ScientificName) %>% \r\n  mutate(cum_est = cumsum(estimate)) %>% \r\n  filter(ScientificName %in% warm_sp)\r\n\r\nplt <- function(.data = cold) {\r\n  ggplot(data = .data, aes(x = term, y = cum_est)) +\r\n    geom_line(aes(color = ScientificName, group = ScientificName), size = 1) +\r\n    geom_point(aes(shape = significant), size = 4) +\r\n    scale_y_continuous(expand = c(0, 1)) +\r\n    scale_x_discrete(labels = c(\"Current Year\", \"+1\", \"+2\", \"+3\", \"+4\", \"+5\")) +\r\n    scale_color_viridis_d(option = \"D\", end = .75, direction = -1) +\r\n    labs(x = \"Years relative to SST anomaly exposure\", y = \"Cumulative effect (sum of coefficients)\",\r\n         shape = \"P-Val < .05?\", color = \"Species\") +\r\n    theme_classic() \r\n}\r\n\r\n\r\n\r\nCold-water species\r\nThe two species with the largest negative cumulative effect were identified as Strongylocentrotus purpuratus (purple sea urchin) and Strongylocentrotus franciscanus (red sea urchin). Purple sea urchin seem to have the most extreme negative coefficients, suggesting that this species thrives under cold-water conditions. Red sea urchins have a similar though less extreme response to cold-water conditions. In both urchin species, the effect is significant in the same year, as well as the year following cold-water conditions. This makes sense, because despite non-invasive sampling, juvenile sea urchins as small as 1 mm have been recorded by KFM observers.\r\nPatiria miniata (bat star) had the third most negative cumulative effect. This species is particularly affected by warm water, which tends to cause a form of sea star wasting disease (SSWD). Bat star populations take years to rebound following SSWD events. This slow recovery is seen in the cumulative effect which is statistically significant for the current period and for the following four years.\r\n\r\n\r\nhide\r\n\r\nplt()\r\n\r\n\r\n\r\n\r\n      Figure 2. The cumulative effect that SST anomalies have on the three species\r\n      which have the largest negative slope estimates of all statistically significant\r\n      results. The effect accumulates from the current year to the following 5 years.\r\n\r\nWarm-water species\r\nSargassum horneri (devil weed) had the single most positive cumulative effect of any species. This is an invasive algae that has spread rapidly at the Channel Islands since its introduction to Catalina island in 2006 (Miller 2007). Predicting what factors contribute to the spread of S. horneri will help scientist understand where to expect it next and what impacts it might have on the ecologic communities it settles in. Only the current year is seen to be positive, suggesting that S. horneri juveniles are largely responsible for the effect.\r\nMegastaea undosa (wavy turban snail) is an important grazing snail that is known to spawn in warm-water conditions which means that ENSO may be helpful in setting harvest quotas (Zacharias 2006). The effect is only significant 2, 3, and 4 years following a warm water event. I would argue that these snails spawn late in the year when the water is warmest and the sampling season is coming to a close. The following year, the juvenile snails are most likely missed as they are too cryptic. Then during the 2nd, 3rd, and 4th year, these animals are largest enough to be observed reliably.\r\nLytechinus anamesus likely follow the same pattern as M. undosa. I would be interested to investigate MPA effects on these lobster and sheephead snack-sized sea urchin (<40 mm typically).\r\n\r\n\r\nhide\r\n\r\nplt(.data = warm)\r\n\r\n\r\n\r\n\r\n      Figure 3. The cumulative effect that SST anomalies have on the three species\r\n      which have the largest positive slope estimates of all statistically significant\r\n      results. The effect accumulates from the current year to the following 5 years.\r\n\r\nFuture Work\r\nBetter Models\r\nInclude biogeogrphic regions to see how species abundance is affected by region. I would also like to include MPA status to identify if there are any buffer effects provided by the MPA, or impacts to prey species from increased preddation.\r\nMore Protocols/Species\r\nThis analysis only uses 2 out of 13 sampling protocols of the KFM program. The analysis could be expanded to include data from the two fish surveys, as well as percent cover data from random point contacts survey.\r\nIntegrate Program Data\r\nThis analysis could be made more robust by including data from the Partnership for Interdisciplinary Study of Coastal Oceans (PISCO), which conducts similar monitoring efforts around the Channel Islands.\r\nCode Availability\r\nGitHub Repository with all code and data available at this link.\r\nLiterature Cited\r\nCostello, M.J., Tsai, P., Wong, P.S. et al. Marine biogeographic realms and species endemicity. Nat Commun 8, 1057 (2017). https://doi.org/10.1038/s41467-017-01121-2\r\nDay, P. B., Stuart-Smith, R. D., Edgar, G. J. & Bates, A. E. Species’ thermal ranges predict changes in reef fish community structure during 8 years of extreme temperature variation. Divers. Distrib. 24, 1036–1046 (2018).\r\nFreedman, R.M., Brown, J.A., Caldow, C. et al. Marine protected areas do not prevent marine heatwave-induced fish community structure changes in a temperate transition zone. Sci Rep 10, 21081 (2020). https://doi.org/10.1038/s41598-020-77885-3\r\nHorta e Costa, B. Tropicalization of fish assemblages in temperate biogeographic transition zones. Mar. Ecol. Prog. Ser. 504, 241–252 (2014).\r\nMiller, K. A., Engle, J. M., Uwai, S., & Kawai, H. (2007). First report of the asian seaweed sargassum filicinum harvey (fucales) in california, usa. Biological Invasions, (9), 609-613.\r\nWernberg, T. S. et al. Climate-driven regime shift of a temperate marine ecosystem. Science 353, 169–172 (2016).\r\nZacharias, Mark, and David J. Kushner. 2006. “Sea temperature and wave height as predictors of population size structure and density of Megastraea (Lithopoma) undosa: Implications for fishery management.” Bulletin of Marine Science 79.1: 71-82.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-12-01-eds-222-final-project-species-density-sst/biogeo.png",
    "last_modified": "2021-12-02T16:12:34-08:00",
    "input_file": {}
  }
]
